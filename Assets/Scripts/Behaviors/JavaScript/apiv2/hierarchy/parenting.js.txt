/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// VISIBLE_TO_MONACO

/**
 * Attaches the current actor to the given actor (also known as setting the
 * transform parent).
 * 
 * <p>After attachment, the current actor will move, rotate and scale with 
 * the new parent actor.
 *
 * @param {ActorRef=} newParent The new parent. If <tt>null</tt>, this will unparent
 *     the current actor, making it a stand-alone actor.
 */
function attachToParent(newParent) {
  ApiV2Context.instance.getActor().setTransformParent(newParent);
}

/**
 * Detaches the actor from its current transform parent, making it
 * into a stand-alone actor.
 */
function detachFromParent() {
  attachToParent(null);
}

/**
 * Returns true if the actor is attached to a parent actor,
 * false if it's a stand-alone actor.
 * @param {ActorRef?} actor The actor to check. If omitted,
 *     defaults to the current actor.
 */
function isAttached(actor) {
  return !!exists(ApiV2Context.instance.getActor(actor).getTransformParent());
}

/**
 * Returns the current attachment parent (transform parent) of the given actor,
 * or null if none.
 * @param {ActorRef?} actor The actor for which to get the parent. If omitted,
 *     defaults to the current actor.
 */
function getParent(actor) {
  const parent = ApiV2Context.instance.getActor(actor).getTransformParent();
  return exists(parent) ? parent : null;
}
