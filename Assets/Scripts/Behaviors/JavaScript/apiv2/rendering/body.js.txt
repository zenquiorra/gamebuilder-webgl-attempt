/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// VISIBLE_TO_MONACO

/**
 * Gets the local position of the actor's body. This is the offset that
 * the body is from the actor's center.
 *
 * @param {ActorRef=} actor The actor. If omitted, defaults to the current actor.
 * @return {Vector3} The local position of the body.
 */
function getBodyPos(actor) {
  return ApiV2Context.instance.getActor(actor).getRenderableOffset();
}

/**
 * Sets the local position of the actor's body. This is the offset
 * that the body is from the object's center. This affects both visuals and collisions.
 *
 * @param {Vector3} pos The new local position of the body.
 */
function setBodyPos(pos) {
  assertVector3(pos);
  ApiV2Context.instance.getActor().setRenderableOffset(pos);
}

/**
 * Gets the local rotation of an actor's body. This represents how
 * the body is rotated with relation to the actor's pose.
 *
 * @param {Actor=} actor The actor. If omitted, defaults to the current actor.
 * @return {Quaternion} The local rotation of the actor's body.
 */
function getBodyRot(actor) {
  return ApiV2Context.instance.getActor(actor).getRenderableRotation();
}

/**
 * Sets the local rotation of the actor's body, which indicates how
 * the body is rotated in the actor's frame of reference.
 *
 * @param rot {Quaternion} The new rotation.
 */
function setBodyRot(rot) {
  assertQuaternion(rot);
  ApiV2Context.instance.getActor().setRenderableRotation(rot);
}

/**
 * Returns the size of the world-space axis-aligned bounding box for the actor.
 * This is the <b>current</b> bounding box for the actor in its current pose.
 * Since this is in world space, it might change, for example, if the actor
 * is moved, rotated or scaled.
 *
 * @param {Actor=} actor The actor. If omitted, defaults to the current actor.
 * @return {Vector3} The size of the axis-aligned bounding box for the actor.
 */
function getBoundsSize(actor) {
  return ApiV2Context.instance.getActor(actor).getBoundsSize();
}

/**
 * Returns the radius of the smallest sphere that contains the actor's
 * bounding box.
 * 
 * <p>This sphere will overestimate the actor's size a bit, depending on
 * how it's rotated.
 *
 * @param {Actor=} actor The actor. If omitted, defaults to the current actor.
 * @param {boolean} includeVertical If true, includes the actor's vertical size in the calculation.
 *     Defaults to false (considers only the planar component).
 * @return {number} The radius of the sphere.
 */
function getBoundsRadiusOuter(actor, includeVertical = false) {
  const boundsSize = getBoundsSize(actor);
  // Radius of the sphere is the distance from the center to the edge of the bounds.
  // If the center is (0,0,0) then the outer edge is at (bx/2,by/2,bz/2) hence the distance
  // is sqrt(1/4*bx^2 + 1/4*by^2 + 1/4*bz^2) = 1/2 * sqrt(bx^2+by^2+bz^2)
  return 0.5 * Math.sqrt(boundsSize.x * boundsSize.x + boundsSize.z * boundsSize.z +
    (includeVertical ? (boundsSize.y * boundsSize.y) : 0));
}

/**
 * Returns the radius of the biggest sphere that can be contained inside the actor's
 * bounding box.
 * 
 * <p>This sphere will underestimate the actor's size a bit, depending on
 * the relationship between its three dimensions, and how it's rotated.
 *
 * @param {Actor=} actor The actor. If omitted, defaults to the current actor.
 * @param {boolean} includeVertical If true, includes the actor's vertical size in the calculation.
 *     Defaults to false (considers only the planar component).
 * @return {number} The radius of the sphere.
 */
function getBoundsRadiusInner(actor, includeVertical = false) {
  const boundsSize = getBoundsSize(actor);
  // Radius of the sphere is the smallest of the bounds extents.
  const diameter = includeVertical ? Math.min(boundsSize.x, boundSize.y, boundSize.z) :
    Math.min(boundsSize.x, boundsSize.z);
  return diameter / 2.0;
}

/**
 * Returns the average radius of the actor, computed as the average between
 * bounding box.
 * 
 * <p>This sphere will underestimate the actor's size a bit, depending on
 * the relationship between its three dimensions, and how it's rotated.
 *
 * @param {Actor=} actor The actor. If omitted, defaults to the current actor.
 * @param {boolean} includeVertical If true, includes the actor's vertical size in the calculation.
 *     Defaults to false (considers only the planar component).
 * @return {number} The radius of the sphere.
 */
function getBoundsRadiusAverage(actor, includeVertical = false) {
  return 0.5 * (getBoundsRadiusInner(actor, includeVertical) + getBoundsRadiusOuter(actor, includeVertical));
}

/**
 * Returns the center of the world-space axis-aligned bounding box for the
 * actor. This is the <b>current</b> bounding box for the actor in its current
 * pose. Since this is in world space, it might change, for example, if the
 * actor is moved, rotated or scaled.
 * @param {Actor=} actor The actor. If omitted, defaults to the current actor.
 * @return {Vector3} The center of the axis-aligned bounding box for the actor.
 */
function getBoundsCenter(actor) {
  return ApiV2Context.instance.getActor(actor).getBoundsCenter();
}

