/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * monaco-languages version: 1.5.1(d085b3bad82f8b59df390ce976adef0c83a9289e)
 * Released under the MIT license
 * https://github.com/Microsoft/monaco-languages/blob/master/LICENSE.md
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/typescript/typescript",["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="undefined"==typeof monaco?self.monaco:monaco;t.conf={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],onEnterRules:[{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,afterText:/^\s*\*\/$/,action:{indentAction:n.languages.IndentAction.IndentOutdent,appendText:" * "}},{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,action:{indentAction:n.languages.IndentAction.None,appendText:" * "}},{beforeText:/^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,action:{indentAction:n.languages.IndentAction.None,appendText:"* "}},{beforeText:/^(\t|(\ \ ))*\ \*\/\s*$/,action:{indentAction:n.languages.IndentAction.None,removeText:1}}],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],folding:{markers:{start:new RegExp("^\\s*//\\s*#?region\\b"),end:new RegExp("^\\s*//\\s*#?endregion\\b")}}},t.language={defaultToken:"invalid",tokenPostfix:".ts",keywords:["abstract","as","break","case","catch","class","continue","const","constructor","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","null","package","private","protected","public","readonly","require","global","return","set","static","super","switch","symbol","this","throw","true","try","type","typeof","unique","var","void","while","with","yield","async","await","of"],typeKeywords:["any","boolean","number","object","string","undefined"],operators:["<=",">=","==","!=","===","!==","=>","+","-","**","*","/","%","++","--","<<","</",">>",">>>","&","|","^","!","~","&&","||","?",":","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=","@"],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,regexpctl:/[(){}\[\]\$\^|\-*+?\.]/,regexpesc:/\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,tokenizer:{root:[[/[{}]/,"delimiter.bracket"],{include:"common"}],common:[[/[a-z_$][\w$]*/,{cases:{"@typeKeywords":"keyword","@keywords":"keyword","@default":"identifier"}}],[/[A-Z][\w\$]*/,"type.identifier"],{include:"@whitespace"},[/\/(?=([^\\\/]|\\.)+\/([gimuy]*)(\s*)(\.|;|\/|,|\)|\]|\}|$))/,{token:"regexp",bracket:"@open",next:"@regexp"}],[/[()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/,"number.float"],[/0[xX](@hexdigits)/,"number.hex"],[/0(@octaldigits)/,"number.octal"],[/0[bB](@binarydigits)/,"number.binary"],[/(@digits)/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_double"],[/'/,"string","@string_single"],[/`/,"string","@string_backtick"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@jsdoc"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],jsdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],regexp:[[/(\{)(\d+(?:,\d*)?)(\})/,["regexp.escape.control","regexp.escape.control","regexp.escape.control"]],[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,["regexp.escape.control",{token:"regexp.escape.control",next:"@regexrange"}]],[/(\()(\?:|\?=|\?!)/,["regexp.escape.control","regexp.escape.control"]],[/[()]/,"regexp.escape.control"],[/@regexpctl/,"regexp.escape.control"],[/[^\\\/]/,"regexp"],[/@regexpesc/,"regexp.escape"],[/\\\./,"regexp.invalid"],["/",{token:"regexp",bracket:"@close"},"@pop"]],regexrange:[[/-/,"regexp.escape.control"],[/\^/,"regexp.invalid"],[/@regexpesc/,"regexp.escape"],[/[^\]]/,"regexp"],[/\]/,"@brackets.regexp.escape.control","@pop"]],string_double:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_single:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]],string_backtick:[[/\$\{/,{token:"delimiter.bracket",next:"@bracketCounting"}],[/[^\\`$]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/`/,"string","@pop"]],bracketCounting:[[/\{/,"delimiter.bracket","@bracketCounting"],[/\}/,"delimiter.bracket","@pop"],{include:"common"}]}}}),define("vs/basic-languages/javascript/javascript",["require","exports","../typescript/typescript"],function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});"undefined"==typeof monaco?self.monaco:monaco;t.conf=n.conf,t.language={defaultToken:"invalid",tokenPostfix:".js",keywords:["ActorRef","ActorRef","BlockDir","BlockShape","BlockStyle","CameraSettings","CastHit","CastMode","KeyCode","KeyMessage","Particles","PhysicsPreset","PlayerJoinedMessage","PlayerLeftMessage","PropDeckOptions","PropDefRequirement","PropOptions","RectStyle","RuntimeCardStatus","SceneLightingMode","ShapeStyle","SkyType","Sounds","UiButtonOptions","UiColor","UiImageOptions","UiScreenInfo","UiShapeOptions","UiTextOptions","addTorque","addVelocity","addVelocityPlease","applyQuaternion","applyQuaternionPlease","applyQuaternionSelf","applyQuaternionSelfPlease","async","attachToParent","attachToParentPlease","await","break","broadcast","callActionDeck","callDeck","callEventDeck","card","case","castAdvanced","catch","checkBox","class","clearBlock","clearBlockAtPoint","clearLight","clone","colorFromHex","colorToHex","const","constructor","continue","cooldown","deactivateActionDeck","debugger","declareMemoryUnchanged","deepCopy","default","degToRad","delete","deleteVar","deleteVarPlease","deltaTime","destroySelf","destroySelfPlease","detachFromParent","detachFromParentPlease","do","else","enableGravity","enableGravityPlease","enableKeepUpright","enableKeepUprightPlease","exists","export","extends","false","finally","for","from","function","get","getActorGroupDescription","getActorUnderMouse","getActorWithTag","getActors","getActorsInGroup","getActorsUnderMouse","getActorsWithTag","getAimDirection","getAimOrigin","getAimTarget","getAllPlayers","getAllVars","getBackward","getBlock","getBlockAtPoint","getBlockCenter","getBlockCoordsAtPoint","getBlockSize","getBodyPos","getBodyRot","getBoundsCenter","getBoundsRadiusAverage","getBoundsRadiusInner","getBoundsRadiusOuter","getBoundsSize","getCameraActor","getCardErrorMessage","getCardStatus","getCardTargetActor","getCardTargetActorDescription","getCloneParent","getClosestActor","getCommentText","getControllingPlayer","getDisplayName","getDistanceBetween","getDistanceTo","getDown","getForward","getGameRulesActor","getLastAimHitPoint","getLeft","getLocalCameraForward","getLocalCameraPos","getLocalCameraRot","getLocalPlayer","getLocalPos","getLocalRot","getLookAxes","getLoopingAnimation","getMessageSender","getMouseRayDir","getMouseRayOrigin","getMouseWheel","getMouseX","getMouseY","getParent","getPhysicsPreset","getPitch","getPlayerActors","getPlayerByNumber","getPlayerControlledActor","getPlayerNickName","getPlayerNumber","getPointAbove","getPointAhead","getPointBehind","getPointBelow","getPointToLeftOf","getPointToRightOf","getPos","getPosX","getPosY","getPosZ","getRawThrottle","getRight","getRoll","getRot","getScale","getScaleUniform","getSceneLighting","getScreenPoint","getScreenRect","getScreenSphere","getSkyColor","getSkyType","getSpawnPos","getSpawnRot","getTerrainPointUnderMouse","getThrottle","getTime","getTimeSinceReset","getTint","getTintColor","getTintHex","getUp","getVar","getVelocity","getWorldThrottle","getYaw","goOffstage","goOnstage","grow","hasPlayerInput","hasTag","hide","hidePlease","if","import","in","instanceof","interp","isActorInGroup","isAttached","isClaimed","isClone","isGravityEnabled","isGrounded","isInMultiplayerMode","isKeepUprightEnabled","isKinematic","isMasterPlayer","isOffstage","isOnstage","isPlayerControllable","isSolid","isSprinting","isVisible","keyIsPressed","keyJustPressed","keyJustReleased","let","loadRot","loadVec","log","logError","lookAt","lookAtPlease","lookDir","lookDirPlease","lookToward","lookTowardDir","mem","mouseIsPressed","mouseJustPressed","mouseJustReleased","mousePressed","move","moveBackward","moveDown","moveForward","moveGlobal","moveLeft","moveRight","moveToward","moveUp","myself","new","null","of","onActorClicked","onCardRemoved","onCollision","onInit","onJump","onKeyDown","onKeyHeld","onKeyUp","onLocalTick","onMouseDown","onMouseHeld","onMouseUp","onOffstageTick","onPlayerJoined","onPlayerLeft","onPrimaryAction","onResetGame","onSecondaryAction","onSpawnAsClone","onTerrainCollision","onTick","overlapSphere","playAnimation","playSound","playerExists","propActor","propActorArray","propActorGroup","propBoolean","propCardTargetActor","propColor","propDecimal","propDeck","propEnum","propEnum","propEnumArray","propImage","propNumber","propNumberArray","propParticleEffect","propSound","propString","propStringArray","props","push","quatApply","quatAxisAngle","quatIdent","radToDeg","raycast","raycastTerrain","requestCameraOffset","requireEqual","requireFalse","requireNotEqual","requireTrue","resetCameraActor","resetGame","resetLocalRot","resetRot","resetRotPlease","resetSpawnRot","return","revToRad","rotate","saveRot","saveVec","selfToWorldDir","selfToWorldPos","send","sendDelayed","sendToAll","sendToAllDelayed","sendToMany","sendToManyDelayed","sendToSelf","sendToSelfDelayed","set","setAngularDrag","setAngularDragPlease","setBlock","setBlockAtPoint","setBodyPos","setBodyPosPlease","setBodyRot","setBodyRotPlease","setBounciness","setBouncinessPlease","setCameraActor","setCameraActorPlease","setCameraSettings","setCommentText","setCommentTextPlease","setControllingPlayer","setControllingPlayerPlease","setDisplayName","setDisplayNamePlease","setDrag","setDragPlease","setIsPlayerControllable","setIsPlayerControllablePlease","setKinematic","setKinematicPlease","setLight","setLocalPos","setLocalRot","setLoopingAnimation","setMass","setMassPlease","setPhysicsPreset","setPhysicsPresetPlease","setPitch","setPitchPlease","setPos","setPosPlease","setPosX","setPosXYZ","setPosY","setPosZ","setRoll","setRollPlease","setRot","setRotPlease","setScale","setScalePlease","setScaleUniform","setScaleUniformPlease","setSceneLighting","setSkyColor","setSkyType","setSolid","setSolidPlease","setSpawnPos","setSpawnRot","setTint","setTintColor","setTintColorPlease","setTintHex","setTintHexPlease","setVar","setVarPlease","setYaw","setYawPitchRoll","setYawPitchRollPlease","setYawPlease","show","showPlease","shrink","spawnParticleEffect","spin","super","switch","symbol","temp","this","throw","toFixedLength","true","try","tryPlaySound","trySpawnParticleEffect","turn","turnPlease","typeof","uiButton","uiCircle","uiGetScreenHeight","uiGetScreenInfo","uiGetScreenWidth","uiGetTextHeight","uiGetTextWidth","uiImage","uiImageSlice","uiLine","uiRect","uiSprite","uiText","uiTriangle","undefined","var","vec3","vec3add","vec3addScaled","vec3addX","vec3addY","vec3addZ","vec3dot","vec3equal","vec3length","vec3lengthSq","vec3neg","vec3normalized","vec3one","vec3scale","vec3sub","vec3toString","vec3withLength","vec3withX","vec3withY","vec3withZ","vec3x","vec3y","vec3z","vec3zero","void","while","with","worldToSelfDir","worldToSelfPos","yield"],typeKeywords:[],operators:n.language.operators,symbols:n.language.symbols,escapes:n.language.escapes,digits:n.language.digits,octaldigits:n.language.octaldigits,binarydigits:n.language.binarydigits,hexdigits:n.language.hexdigits,regexpctl:n.language.regexpctl,regexpesc:n.language.regexpesc,tokenizer:n.language.tokenizer}});